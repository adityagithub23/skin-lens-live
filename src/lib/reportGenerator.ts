import { Prediction } from "@/components/PredictionDisplay";

export async function generateReport(
  image: string,
  heatmap: string | undefined,
  predictions: Prediction[]
): Promise<void> {
  // Create a new canvas for the report
  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  if (!ctx) return;

  // Set canvas size (A4 proportions)
  canvas.width = 1240;
  canvas.height = 1754;

  // Background
  ctx.fillStyle = "#ffffff";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Header
  ctx.fillStyle = "#0066CC";
  ctx.fillRect(0, 0, canvas.width, 120);
  
  ctx.fillStyle = "#ffffff";
  ctx.font = "bold 48px sans-serif";
  ctx.fillText("Skin Lesion Analysis Report", 60, 80);

  // Timestamp
  ctx.fillStyle = "#666666";
  ctx.font = "20px sans-serif";
  const date = new Date().toLocaleString();
  ctx.fillText(`Generated: ${date}`, 60, 180);

  // Disclaimer
  ctx.fillStyle = "#CC0000";
  ctx.font = "bold 24px sans-serif";
  ctx.fillText("âš  IMPORTANT: This is not a medical diagnosis", 60, 240);
  ctx.fillStyle = "#666666";
  ctx.font = "18px sans-serif";
  ctx.fillText("This AI-generated report is for educational purposes only.", 60, 280);
  ctx.fillText("Always consult a qualified dermatologist for medical evaluation.", 60, 310);

  // Load and draw images
  let yOffset = 360;
  
  try {
    const originalImg = await loadImageFromDataURL(image);
    const imgWidth = 500;
    const imgHeight = (originalImg.height / originalImg.width) * imgWidth;
    
    ctx.fillStyle = "#000000";
    ctx.font = "bold 24px sans-serif";
    ctx.fillText("Original Image", 60, yOffset);
    yOffset += 30;
    
    ctx.drawImage(originalImg, 60, yOffset, imgWidth, imgHeight);
    
    if (heatmap) {
      const heatmapImg = await loadImageFromDataURL(heatmap);
      ctx.fillText("Grad-CAM Heatmap", 620, yOffset - 30);
      ctx.drawImage(heatmapImg, 620, yOffset, imgWidth, imgHeight);
    }
    
    yOffset += imgHeight + 60;
  } catch (error) {
    console.error("Error loading images:", error);
  }

  // Predictions
  ctx.fillStyle = "#000000";
  ctx.font = "bold 28px sans-serif";
  ctx.fillText("Analysis Results", 60, yOffset);
  yOffset += 50;

  predictions.forEach((prediction, index) => {
    ctx.fillStyle = index === 0 ? "#0066CC" : "#666666";
    ctx.font = `${index === 0 ? "bold" : ""} 22px sans-serif`;
    ctx.fillText(
      `${index + 1}. ${prediction.label} - ${(prediction.confidence * 100).toFixed(1)}%`,
      80,
      yOffset
    );
    yOffset += 40;
    
    if (index === 0) {
      ctx.fillStyle = "#666666";
      ctx.font = "18px sans-serif";
      const words = prediction.description.split(" ");
      let line = "";
      for (const word of words) {
        const testLine = line + word + " ";
        if (ctx.measureText(testLine).width > 1100) {
          ctx.fillText(line, 100, yOffset);
          line = word + " ";
          yOffset += 30;
        } else {
          line = testLine;
        }
      }
      ctx.fillText(line, 100, yOffset);
      yOffset += 50;
    }
  });

  // Footer disclaimer
  yOffset = canvas.height - 100;
  ctx.fillStyle = "#CC0000";
  ctx.font = "bold 18px sans-serif";
  ctx.fillText("Medical Disclaimer:", 60, yOffset);
  ctx.fillStyle = "#666666";
  ctx.font = "16px sans-serif";
  ctx.fillText(
    "This report is generated by an AI system and should not be used for medical diagnosis or treatment decisions.",
    60,
    yOffset + 30
  );
  ctx.fillText(
    "Consult a qualified healthcare professional for any medical concerns.",
    60,
    yOffset + 55
  );

  // Download
  canvas.toBlob((blob) => {
    if (blob) {
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `skin-analysis-report-${Date.now()}.png`;
      a.click();
      URL.revokeObjectURL(url);
    }
  });
}

function loadImageFromDataURL(dataURL: string): Promise<HTMLImageElement> {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = dataURL;
  });
}
